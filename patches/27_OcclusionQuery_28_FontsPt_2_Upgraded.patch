diff -up 27_OcclusionQuery/freeTypeFont.cpp 28_FontsPt_2_Upgraded/freeTypeFont.cpp
--- 27_OcclusionQuery/freeTypeFont.cpp	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/freeTypeFont.cpp	2015-12-14 14:20:08.072309790 +0200
@@ -30,7 +30,7 @@ Result:	Creates one single character (it
 
 inline GLint next_p2(GLint n){GLint res = 1; while(res < n)res <<= 1; return res;}
 
-GLvoid CFreeTypeFont::CreateChar(GLint iIndex)
+GLvoid CFreeTypeFont::CreateChar(GLint iIndex, GLubyte* bData)
 {
 	FT_Load_Glyph(ftFace, FT_Get_Char_Index(ftFace, iIndex), FT_LOAD_DEFAULT);
 
@@ -38,20 +38,21 @@ GLvoid CFreeTypeFont::CreateChar(GLint i
 	FT_Bitmap* pBitmap = &ftFace->glyph->bitmap;
 
 	GLint iW = pBitmap->width, iH = pBitmap->rows;
-	GLint iTW = next_p2(iW), iTH = next_p2(iH);
 
-	GLubyte* bData = new GLubyte[iTW*iTH];
-	// Copy glyph data and add dark pixels elsewhere
-	FOR(ch, iTH)FOR(cw, iTW)
-		bData[ch*iTW+cw] = (ch >= iH || cw >= iW) ? 0 : pBitmap->buffer[(iH-ch-1)*iW+cw];
- 
-	// And create a texture from it
+	// Some characters when rendered, are somehow just bigger than our desired pixel size
+	// In this case, I just ignore them - another solution is to set iOneCharSquareSize in LoadFont function
+	// to twice the size (just multiply by 2 and you're safe)
+	if(iW > iOneCharSquareSize)
+		return;
+	if(iH > iOneCharSquareSize)
+		return;
+
+	GLint iRow = (iIndex%CHARS_PER_TEXTURE)/CHARS_PER_TEXTUREROOT;
+	GLint iCol = (iIndex%CHARS_PER_TEXTURE)%CHARS_PER_TEXTUREROOT;
+	GLint iOneTextureByteRowSize = CHARS_PER_TEXTUREROOT*iOneCharSquareSize;
 
-	tCharTextures[iIndex].CreateFromData(bData, iTW, iTH, 8, GL_DEPTH_COMPONENT, false);
-	tCharTextures[iIndex].SetFiltering(TEXTURE_FILTER_MAG_BILINEAR, TEXTURE_FILTER_MIN_BILINEAR);
-
-	tCharTextures[iIndex].SetSamplerParameter(GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
-	tCharTextures[iIndex].SetSamplerParameter(GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+	// Copy glyph data
+	FOR(ch, iH)memcpy(bData+iRow*iOneTextureByteRowSize*iOneCharSquareSize + iCol*iOneCharSquareSize + ch*iOneTextureByteRowSize, pBitmap->buffer + (iH-ch-1)*iW, iW);
 
 	// Calculate glyph data
 	iAdvX[iIndex] = ftFace->glyph->advance.x>>6;
@@ -64,15 +65,22 @@ GLvoid CFreeTypeFont::CreateChar(GLint i
 
 	iNewLine = max(iNewLine, int(ftFace->glyph->metrics.height>>6));
 
-	// Rendering data, texture coordinates are always the same, so now we waste a little memory
 	glm::vec2 vQuad[] =
 	{
-		glm::vec2(0.0f, float(-iAdvY[iIndex]+iTH)),
+		glm::vec2(0.0f, float(-iAdvY[iIndex]+iOneCharSquareSize)),
 		glm::vec2(0.0f, float(-iAdvY[iIndex])),
-		glm::vec2(float(iTW), float(-iAdvY[iIndex]+iTH)),
-		glm::vec2(float(iTW), float(-iAdvY[iIndex]))
+		glm::vec2(float(iOneCharSquareSize), float(-iAdvY[iIndex]+iOneCharSquareSize)),
+		glm::vec2(float(iOneCharSquareSize), float(-iAdvY[iIndex]))
+	};
+	GLfloat fOneStep = 1.0f/(float(CHARS_PER_TEXTUREROOT));
+	// Texture coordinates change depending on character index, which determines its position in the texture
+	glm::vec2 vTexQuad[] =
+	{
+		glm::vec2(float(iCol)*fOneStep, float(iRow+1)*fOneStep),
+		glm::vec2(float(iCol)*fOneStep, float(iRow)*fOneStep),
+		glm::vec2(float(iCol+1)*fOneStep, float(iRow+1)*fOneStep),
+		glm::vec2(float(iCol+1)*fOneStep, float(iRow)*fOneStep)
 	};
-	glm::vec2 vTexQuad[] = {glm::vec2(0.0f, 1.0f), glm::vec2(0.0f, 0.0f), glm::vec2(1.0f, 1.0f), glm::vec2(1.0f, 0.0f)};
 
 	// Add this GLchar to VBO
 	FOR(i, 4)
@@ -80,7 +88,6 @@ GLvoid CFreeTypeFont::CreateChar(GLint i
 		vboData.AddData(&vQuad[i], sizeof(glm::vec2));
 		vboData.AddData(&vTexQuad[i], sizeof(glm::vec2));
 	}
-	delete[] bData;
 }
 
 /*-----------------------------------------------
@@ -94,7 +101,7 @@ Result:	Loads whole font.
 
 /*---------------------------------------------*/
 
-GLboolean CFreeTypeFont::LoadFont(string sFile, GLint iPXSize)
+GLboolean CFreeTypeFont::LoadFont(string sFile, GLint iPXSize, GLint iMaxCharSupport)
 {
 	BOOL bError = FT_Init_FreeType(&ftLib);
 	
@@ -102,23 +109,58 @@ GLboolean CFreeTypeFont::LoadFont(string
 	if(bError)return false;
 	FT_Set_Pixel_Sizes(ftFace, iPXSize, iPXSize);
 	iLoadedPixelSize = iPXSize;
+	iOneCharSquareSize = next_p2(iLoadedPixelSize);
+
+	// Neat trick - we need to calculate ceil(iMaxCharSupport/CHARS_PER_TEXTURE) and that calculation does it, more in article
+	GLint iNumTextures = (iMaxCharSupport+CHARS_PER_TEXTURE-1)/CHARS_PER_TEXTURE;
+
+	// One texture will store up to CHARS_PER_TEXTURE characters
+	GLubyte** bTextureData = new GLubyte*[iNumTextures];
+
+	tCharTextures.resize(iNumTextures);
+
+	FOR(i, iNumTextures)
+	{
+		GLint iTextureDataSize = iOneCharSquareSize*iOneCharSquareSize*CHARS_PER_TEXTURE;
+		bTextureData[i] = new GLubyte[iTextureDataSize];
+		memset(bTextureData[i], 0, iTextureDataSize);
+	}
+
+	iAdvX.resize(iMaxCharSupport); iAdvY.resize(iMaxCharSupport);
+	iBearingX.resize(iMaxCharSupport); iBearingY.resize(iMaxCharSupport);
+	iCharWidth.resize(iMaxCharSupport); iCharHeight.resize(iMaxCharSupport);
 
 	glGenVertexArrays(1, &uiVAO);
 	glBindVertexArray(uiVAO);
 	vboData.CreateVBO();
 	vboData.BindVBO();
 
-	FOR(i, 128)CreateChar(i);
+	FOR(i, iMaxCharSupport)CreateChar(i, bTextureData[i/CHARS_PER_TEXTURE]);
 	bLoaded = true;
 
 	FT_Done_Face(ftFace);
 	FT_Done_FreeType(ftLib);
+
+	FOR(i, iNumTextures)
+	{
+		tCharTextures[i].CreateFromData(bTextureData[i], iOneCharSquareSize*CHARS_PER_TEXTUREROOT, iOneCharSquareSize*CHARS_PER_TEXTUREROOT, 8, GL_DEPTH_COMPONENT, false);
+		tCharTextures[i].SetFiltering(TEXTURE_FILTER_MAG_BILINEAR, TEXTURE_FILTER_MIN_BILINEAR);
+
+		tCharTextures[i].SetSamplerParameter(GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+		tCharTextures[i].SetSamplerParameter(GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+	}
 	
 	vboData.UploadDataToGPU(GL_STATIC_DRAW);
 	glEnableVertexAttribArray(0);
 	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(glm::vec2)*2, 0);
 	glEnableVertexAttribArray(1);
 	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(glm::vec2)*2, (void*)(sizeof(glm::vec2)));
+
+	FOR(i, iNumTextures)
+		delete[] bTextureData[i];
+
+	delete[] bTextureData;
+
 	return true;
 }
 
@@ -134,14 +176,14 @@ Result:	Loads system font (from system F
 
 /*---------------------------------------------*/
 
-GLboolean CFreeTypeFont::LoadSystemFont(string sName, GLint iPXSize)
+GLboolean CFreeTypeFont::LoadSystemFont(string sName, GLint iPXSize, GLint iMaxCharSupport)
 {
 	GLchar buf[512]; GetWindowsDirectory(buf, 512);
 	string sPath = buf;
 	sPath += "/Fonts/";
 	sPath += sName;
 
-	return LoadFont(sPath, iPXSize);
+	return LoadFont(sPath, iPXSize, iMaxCharSupport);
 }
 
 /*-----------------------------------------------
@@ -180,6 +222,7 @@ Result:	Prints text at specified positio
 GLvoid CFreeTypeFont::Print(string sText, GLint x, GLint y, GLint iPXSize)
 {
 	if(!bLoaded)return;
+	GLint iLastBoundTexture = -1;
 
 	glBindVertexArray(uiVAO);
 	shShaderProgram->SetUniform("gSampler", 0);
@@ -197,10 +240,59 @@ GLvoid CFreeTypeFont::Print(string sText
 			continue;
 		}
 		GLint iIndex = int(sText[i]);
+		GLint iTextureNeeded = iIndex/CHARS_PER_TEXTURE;
+		if(iTextureNeeded != iLastBoundTexture)
+		{
+			iLastBoundTexture = iTextureNeeded;
+			tCharTextures[iTextureNeeded].BindTexture();
+		}
+		iCurX += iBearingX[iIndex]*iPXSize/iLoadedPixelSize;
+		if(sText[i] != ' ')
+		{
+			glm::mat4 mModelView = glm::translate(glm::mat4(1.0f), glm::vec3(float(iCurX), float(iCurY), 0.0f));
+			mModelView = glm::scale(mModelView, glm::vec3(fScale));
+			shShaderProgram->SetUniform("matrices.modelViewMatrix", mModelView);
+			// Draw character
+			glDrawArrays(GL_TRIANGLE_STRIP, iIndex*4, 4);
+		}
+
+		iCurX += (iAdvX[iIndex]-iBearingX[iIndex])*iPXSize/iLoadedPixelSize;
+	}
+	glDisable(GL_BLEND);
+}
+
+GLvoid CFreeTypeFont::Print(wstring sText, GLint x, GLint y, GLint iPXSize)
+{
+	if(!bLoaded)return;
+	GLint iLastBoundTexture = -1;
+
+	glBindVertexArray(uiVAO);
+	shShaderProgram->SetUniform("gSampler", 0);
+	glEnable(GL_BLEND);
+	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+	GLint iCurX = x, iCurY = y;
+	if(iPXSize == -1)iPXSize = iLoadedPixelSize;
+	GLfloat fScale = float(iPXSize)/float(iLoadedPixelSize);
+	FOR(i, ESZ(sText))
+	{
+		if(sText[i] == '\n')
+		{
+			iCurX = x;
+			iCurY -= iNewLine*iPXSize/iLoadedPixelSize;
+			continue;
+		}
+		GLint iIndex = int(sText[i]);
+		GLint iTextureNeeded = iIndex/CHARS_PER_TEXTURE;
+		if(iTextureNeeded < 0 || iTextureNeeded >= ESZ(tCharTextures))
+			continue;
+		if(iTextureNeeded != iLastBoundTexture)
+		{
+			iLastBoundTexture = iTextureNeeded;
+			tCharTextures[iTextureNeeded].BindTexture();
+		}
 		iCurX += iBearingX[iIndex]*iPXSize/iLoadedPixelSize;
 		if(sText[i] != ' ')
 		{
-			tCharTextures[iIndex].BindTexture();
 			glm::mat4 mModelView = glm::translate(glm::mat4(1.0f), glm::vec3(float(iCurX), float(iCurY), 0.0f));
 			mModelView = glm::scale(mModelView, glm::vec3(fScale));
 			shShaderProgram->SetUniform("matrices.modelViewMatrix", mModelView);
@@ -236,6 +328,16 @@ GLvoid CFreeTypeFont::PrintFormatted(GLi
 	Print(buf, x, y, iPXSize);
 }
 
+GLvoid CFreeTypeFont::PrintFormatted(GLint x, GLint y, GLint iPXSize, wchar_t* sText, ...)
+{
+	wchar_t buf[512];
+	va_list ap;
+	va_start(ap, sText);
+	vswprintf(buf, sText, ap);
+	va_end(ap);
+	Print(buf, x, y, iPXSize);
+}
+
 /*-----------------------------------------------
 
 Name:	DeleteFont
@@ -248,7 +350,8 @@ Result:	Deletes all font textures.
 
 GLvoid CFreeTypeFont::DeleteFont()
 {
-	FOR(i, 128)tCharTextures[i].DeleteTexture();
+	FOR(i, ESZ(tCharTextures))
+		tCharTextures[i].DeleteTexture();
 	vboData.DeleteVBO();
 	glDeleteVertexArrays(1, &uiVAO);
 }
diff -up 27_OcclusionQuery/freeTypeFont.h 28_FontsPt_2_Upgraded/freeTypeFont.h
--- 27_OcclusionQuery/freeTypeFont.h	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/freeTypeFont.h	2015-12-14 14:20:08.072309790 +0200
@@ -16,16 +16,21 @@ Purpose:	Wraps FreeType fonts and
 
 ********************************/
 
+#define CHARS_PER_TEXTURE 1024
+#define CHARS_PER_TEXTUREROOT 32
+
 class CFreeTypeFont
 {
 public:
-	GLboolean LoadFont(string sFile, GLint iPXSize);
-	GLboolean LoadSystemFont(string sName, GLint iPXSize);
+	GLboolean LoadFont(string sFile, GLint iPXSize, GLint iMaxCharSupport = 128);
+	GLboolean LoadSystemFont(string sName, GLint iPXSize, GLint iMaxCharSupport = 128);
 
 	GLint GetTextWidth(string sText, GLint iPXSize);
 
 	GLvoid Print(string sText, GLint x, GLint y, GLint iPXSize = -1);
+	GLvoid Print(wstring sText, GLint x, GLint y, GLint iPXSize = -1);
 	GLvoid PrintFormatted(GLint x, GLint y, GLint iPXSize, char* sText, ...);
+	GLvoid PrintFormatted(GLint x, GLint y, GLint iPXSize, wchar_t* sText, ...);
 
 	GLvoid DeleteFont();
 
@@ -33,13 +38,14 @@ public:
 
 	CFreeTypeFont();
 private:
-	GLvoid CreateChar(GLint iIndex);
+	GLvoid CreateChar(GLint iIndex, GLubyte* bData);
 
-	CTexture tCharTextures[256];
-	GLint iAdvX[256], iAdvY[256];
-	GLint iBearingX[256], iBearingY[256];
-	GLint iCharWidth[256], iCharHeight[256];
+	vector<CTexture> tCharTextures;
+	vector<int> iAdvX, iAdvY;
+	vector<int> iBearingX, iBearingY;
+	vector<int> iCharWidth, iCharHeight;
 	GLint iLoadedPixelSize, iNewLine;
+	GLint iOneCharSquareSize;
 
 	GLboolean bLoaded;
 
diff -up 27_OcclusionQuery/Lin_OpenGLApp.cpp 28_FontsPt_2_Upgraded/Lin_OpenGLApp.cpp
--- 27_OcclusionQuery/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.068309790 +0200
+++ 28_FontsPt_2_Upgraded/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.072309790 +0200
@@ -319,11 +319,11 @@ Result:	Application entry point.
 
 GLint WINAPI WinMain(GLvoid* hInstance, GLvoid* hPrevInstance, LPSTR sCmdLine, GLint iShow)
 {
-	if(!appMain.InitializeApp("27_opengl_3_3"))
+	if(!appMain.InitializeApp("28_opengl_3_3"))
 		return 0;
 	appMain.RegisterAppClass(hInstance);
 
-	if(!appMain.CreateAppWindow("27.) Occlusion Query - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
+	if(!appMain.CreateAppWindow("28.) Fonts Pt. 2 - Upgraded - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
 		return 0;
 	appMain.ResetTimer();
 
Binary files 27_OcclusionQuery/RenderScene.cpp and 28_FontsPt_2_Upgraded/RenderScene.cpp differ
diff -up 27_OcclusionQuery/static_geometry.cpp 28_FontsPt_2_Upgraded/static_geometry.cpp
--- 27_OcclusionQuery/static_geometry.cpp	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/static_geometry.cpp	2015-12-14 14:20:08.076309790 +0200
@@ -7,7 +7,6 @@ CVertexBufferObject vboOccluders;
 GLuint uiVAOSceneObjects;
 GLuint uiVAOOccluders;
 GLfloat fCubeHalfSize = 30.0f;
-GLint iSphereFaces;
 
 glm::vec3 vCubeVertices[36] = 
 {
@@ -144,14 +143,6 @@ GLvoid PrepareStaticSceneObjects()
 {
 	vboSceneObjects.CreateVBO();
 
-	GLint iSubDivY, iSubDivZ;
-	// Read how detailed the sphere should be from a file
-	FILE* fp = fopen("sphere.ini", "r");
-	fscanf(fp, "%d %d", &iSubDivY, &iSubDivZ);
-	fclose(fp);
-	iSphereFaces = GenerateSphere(vboSceneObjects, fCubeHalfSize/6.0f, iSubDivY, iSubDivZ);
-	
-
 	glm::vec2 vTexCoords[] = 
 	{
 		glm::vec2(0.0f, fCubeHalfSize*0.1f),
diff -up 27_OcclusionQuery/static_geometry.h 28_FontsPt_2_Upgraded/static_geometry.h
--- 27_OcclusionQuery/static_geometry.h	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/static_geometry.h	2015-12-14 14:20:08.076309790 +0200
@@ -8,7 +8,6 @@ extern GLuint uiVAOSceneObjects;
 extern GLuint uiVAOOccluders;
 extern CVertexBufferObject vboSceneObjects;
 extern CVertexBufferObject vboOccluders;
-extern GLint iSphereFaces;
 
 extern GLfloat fCubeHalfSize;
 
diff -up 27_OcclusionQuery/texture.cpp 28_FontsPt_2_Upgraded/texture.cpp
--- 27_OcclusionQuery/texture.cpp	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/texture.cpp	2015-12-14 14:20:08.076309790 +0200
@@ -300,7 +300,7 @@ GLvoid LoadAllTextures()
 {
 	// Load textures
 
-	string sTextureNames[] = {"dirt_seamless.jpg", "metal_plate.jpg", "planked_wood.jpg"};
+	string sTextureNames[] = {"dirt_seamless.jpg", "metal_plate.jpg"};
 
 	FOR(i, NUMTEXTURES)
 	{
diff -up 27_OcclusionQuery/texture.h 28_FontsPt_2_Upgraded/texture.h
--- 27_OcclusionQuery/texture.h	2015-12-14 14:20:08.072309790 +0200
+++ 28_FontsPt_2_Upgraded/texture.h	2015-12-14 14:20:08.076309790 +0200
@@ -64,6 +64,6 @@ private:
 	string sPath;
 };
 
-#define NUMTEXTURES 3
+#define NUMTEXTURES 2
 extern CTexture tTextures[NUMTEXTURES];
 GLvoid LoadAllTextures();
\ No newline at end of file
