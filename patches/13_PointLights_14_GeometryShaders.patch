Only in 14_GeometryShaders/: dirLight.cpp
Only in 14_GeometryShaders/: dirLight.h
Only in 14_GeometryShaders/: fog.cpp
Only in 14_GeometryShaders/: fog.h
diff -up 13_PointLights/Lin_OpenGLApp.cpp 14_GeometryShaders/Lin_OpenGLApp.cpp
--- 13_PointLights/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.024309790 +0200
+++ 14_GeometryShaders/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.028309790 +0200
@@ -321,11 +321,11 @@ Result:	Application messages handler.
 
 GLint WINAPI WinMain(GLvoid* hInstance, GLvoid* hPrevInstance, LPSTR sCmdLine, GLint iShow)
 {
-	if(!appMain.initializeApp("13_opengl_3_3"))
+	if(!appMain.initializeApp("14_opengl_3_3"))
 		return 0;
 	appMain.registerAppClass(hInstance);
 
-	if(!appMain.createWindow("13.) Point Lights - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
+	if(!appMain.createWindow("14.) Geometry Shaders - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
 		return 0;
 	appMain.resetTimer();
 
Only in 14_GeometryShaders/: pointLight.cpp
Only in 14_GeometryShaders/: pointLight.h
diff -up 13_PointLights/RenderScene.cpp 14_GeometryShaders/RenderScene.cpp
--- 13_PointLights/RenderScene.cpp	2015-12-14 14:20:08.024309790 +0200
+++ 14_GeometryShaders/RenderScene.cpp	2015-12-14 14:20:08.028309790 +0200
@@ -12,10 +12,12 @@
 
 #include "skybox.h"
 
+#include "dirLight.h"
+
 #include <glm/gtc/matrix_transform.hpp>
 #include <glm/gtc/type_ptr.hpp>
 
-#define NUMSHADERS 10
+#define NUMSHADERS 11
 #define NUMTEXTURES 4
 
 /* One VBO, where all static data are stored now,
@@ -24,19 +26,18 @@ position, 2 floats for texture coordinat
 3 floats for normal vector. */
 
 CVertexBufferObject vboSceneObjects;
-
 GLuint uiVAOs[1]; // Only one VAO now
 
 CShader shShaders[NUMSHADERS];
-CShaderProgram spPointLights, spOrtho2D, spFont2D, spColor;
-
-CTexture tTextures[NUMTEXTURES];
-
-CFlyingCamera cCamera;
+CShaderProgram spMain, spOrtho2D, spFont2D, spColor;
 
 CFreeTypeFont ftFont;
 
+CTexture tTextures[NUMTEXTURES];
 CSkybox sbMainSkybox;
+CFlyingCamera cCamera;
+
+CDirectionalLight dlSun;
 
 /*-----------------------------------------------
 
@@ -57,6 +58,8 @@ GLvoid initScene(GLvoid* lpParam)
 {
 	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
 
+	// Prepare all scene objects
+
 	vboSceneObjects.createVBO();
 	glGenVertexArrays(1, uiVAOs); // Create one VAO
 	glBindVertexArray(uiVAOs[0]);
@@ -108,43 +111,44 @@ GLvoid initScene(GLvoid* lpParam)
 
 	// Load shaders and create shader programs
 
-	shShaders[0].LoadShader("data/shaders/shader.vert", GL_VERTEX_SHADER);
-	shShaders[1].LoadShader("data/shaders/shader.frag", GL_FRAGMENT_SHADER);
-	shShaders[2].LoadShader("data/shaders/ortho2D.vert", GL_VERTEX_SHADER);
-	shShaders[3].LoadShader("data/shaders/ortho2D.frag", GL_FRAGMENT_SHADER);
-	shShaders[4].LoadShader("data/shaders/font2D.frag", GL_FRAGMENT_SHADER);
-	shShaders[5].LoadShader("data/shaders/directionalLight.frag", GL_FRAGMENT_SHADER);
-	shShaders[6].LoadShader("data/shaders/pointLight.frag", GL_FRAGMENT_SHADER);
-	shShaders[7].LoadShader("data/shaders/fog.frag", GL_FRAGMENT_SHADER);
-
-	shShaders[8].LoadShader("data/shaders/color.vert", GL_VERTEX_SHADER);
-	shShaders[9].LoadShader("data/shaders/color.frag", GL_FRAGMENT_SHADER);
-
-	spPointLights.CreateProgram();
-	spPointLights.addShaderToProgram(&shShaders[0]);
-	spPointLights.addShaderToProgram(&shShaders[1]); 
-	spPointLights.addShaderToProgram(&shShaders[5]);
-	spPointLights.addShaderToProgram(&shShaders[6]);
-	spPointLights.linkProgram();
+	string sShaderFileNames[] = {"main_shader.vert", "main_shader.geom", "main_shader.frag", "ortho2D.vert",
+		"ortho2D.frag", "font2D.frag", "dirLight.frag", "pointLight.frag", "fog.frag", "color.vert", "color.frag"};
+
+	FOR(i, NUMSHADERS)
+	{
+		string sExt = sShaderFileNames[i].substr(ESZ(sShaderFileNames[i])-4, 4);
+		GLint iShaderType = sExt == "vert" ? GL_VERTEX_SHADER : (sExt == "frag" ? GL_FRAGMENT_SHADER : GL_GEOMETRY_SHADER);
+		shShaders[i].LoadShader("data/shaders/"+sShaderFileNames[i], iShaderType);
+	}
+
+	// Create shader programs
+
+	spMain.CreateProgram();
+	spMain.addShaderToProgram(&shShaders[0]);
+	spMain.addShaderToProgram(&shShaders[1]);
+	spMain.addShaderToProgram(&shShaders[2]);
+	spMain.addShaderToProgram(&shShaders[6]);
+	spMain.addShaderToProgram(&shShaders[7]);
+	spMain.linkProgram();
 
 	spOrtho2D.CreateProgram();
-	spOrtho2D.addShaderToProgram(&shShaders[2]);
 	spOrtho2D.addShaderToProgram(&shShaders[3]);
+	spOrtho2D.addShaderToProgram(&shShaders[4]);
 	spOrtho2D.linkProgram();
 
 	spFont2D.CreateProgram();
-	spFont2D.addShaderToProgram(&shShaders[2]);
-	spFont2D.addShaderToProgram(&shShaders[4]);
+	spFont2D.addShaderToProgram(&shShaders[3]);
+	spFont2D.addShaderToProgram(&shShaders[5]);
 	spFont2D.linkProgram();
 
 	spColor.CreateProgram();
-	spColor.addShaderToProgram(&shShaders[8]);
 	spColor.addShaderToProgram(&shShaders[9]);
+	spColor.addShaderToProgram(&shShaders[10]);
 	spColor.linkProgram();
 
 	// Load textures
 
-	string sTextureNames[] = {"grass.jpg", "crate.jpg", "metalplate.jpg", "stone_wall.jpg"};
+	string sTextureNames[] = {"Tile41a.jpg", "crate.jpg", "metalplate.jpg", "stone_wall.jpg"};
 
 	FOR(i, NUMTEXTURES)
 	{
@@ -163,7 +167,9 @@ GLvoid initScene(GLvoid* lpParam)
 	cCamera = CFlyingCamera(glm::vec3(0.0f, 10.0f, 120.0f), glm::vec3(0.0f, 10.0f, 119.0f), glm::vec3(0.0f, 1.0f, 0.0f), 155.0f, 0.1f);
 	cCamera.setMovingKeys('W', 'S', 'A', 'D');
 
-	sbMainSkybox.loadSkybox("data/skyboxes/jajlands1/", "jajlands1_ft.jpg", "jajlands1_bk.jpg", "jajlands1_lf.jpg", "jajlands1_rt.jpg", "jajlands1_up.jpg", "jajlands1_dn.jpg");
+	sbMainSkybox.loadSkybox("data/skyboxes/jajsundown1/", "jajsundown1_ft.jpg", "jajsundown1_bk.jpg", "jajsundown1_lf.jpg", "jajsundown1_rt.jpg", "jajsundown1_up.jpg", "jajsundown1_dn.jpg");
+
+	dlSun = CDirectionalLight(glm::vec3(1.0f, 1.0f, 1.0f), glm::vec3(sqrt(2.0f)/2, -sqrt(2.0f)/2, 0), 0.5f);
 }
 
 /*-----------------------------------------------
@@ -177,39 +183,8 @@ Result:  Renders whole scene.
 /*---------------------------------------------*/
 
 GLfloat fGlobalAngle;
-
-#define FOG_EQUATION_LINEAR	0
-#define FOG_EQUATION_EXP		1
-#define FOG_EQUATION_EXP2		2
-
-namespace FogParameters
-{
-	GLfloat fDensity = 0.04f;
-	GLfloat fStart = 10.0f;
-	GLfloat fEnd = 75.0f;
-	glm::vec4 vFogColor = glm::vec4(0.7f, 0.7f, 0.7f, 1.0f);
-	GLint iFogEquation = FOG_EQUATION_EXP; // 0 = linear, 1 = exp, 2 = exp2
-};
-
-glm::vec3 vLightPos = glm::vec3(0.0f, 10.0f, 20.0f);
-
-GLvoid renderColoredCube()
-{
-	glm::vec3 vColors[] = 
-	{
-		glm::vec3(1.0f, 0.0f, 0.0f),
-		glm::vec3(0.0f, 1.0f, 0.0f),
-		glm::vec3(0.0f, 0.0f, 1.0f),
-		glm::vec3(1.0f, 1.0f, 0.0f),
-		glm::vec3(0.0f, 1.0f, 1.0f),
-		glm::vec3(1.0f, 0.0f, 1.0f)
-	};
-	FOR(i, 6)
-	{
-		spColor.setUniform("vColor", glm::vec4(vColors[i].x, vColors[i].y, vColors[i].z, 1.0f));
-		glDrawArrays(GL_TRIANGLES, i*6, 6);
-	}
-}
+GLfloat fBender = 0.75f;
+GLboolean bWireFrame = false;
 
 GLvoid RenderScene(GLvoid* lpParam)
 {
@@ -218,58 +193,47 @@ GLvoid RenderScene(GLvoid* lpParam)
 
 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
-	glEnable(GL_TEXTURE_2D);
-	spPointLights.UseProgram();
+	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+
+	spMain.UseProgram();
 
-	spPointLights.setUniform("sunLight.vColor", glm::vec3(1.0f, 1.0f, 1.0f));
-	spPointLights.setUniform("sunLight.fAmbientIntensity", 0.5f);
-	spPointLights.setUniform("sunLight.fStrength", 0.5f);
-	spPointLights.setUniform("sunLight.vDirection", glm::vec3(sqrt(2.0f)/2, -sqrt(2.0f)/2, 0));
+	spMain.setUniform("fBender", fBender);
+	if(Keys::key('X'))fBender += appMain.sof(2.0f);
+	if(Keys::key('Z'))fBender -= appMain.sof(2.0f);
 
-	spPointLights.setUniform("matrices.projectionMatrix", oglControl->getProjectionMatrix());
-	spPointLights.setUniform("gSampler", 0);
+	spMain.setUniform("matrices.projMatrix", oglControl->getProjectionMatrix());
+	spMain.setUniform("gSampler", 0);
 
 	glm::mat4 mView = cCamera.look();
-	spPointLights.setUniform("matrices.viewMatrix", &mView);
-	spPointLights.setUniform("matrices.modelMatrix", glm::mat4(1.0f));
+	spMain.setUniform("matrices.viewMatrix", &mView);
+	spMain.setUniform("matrices.modelMatrix", glm::mat4(1.0f));
 
 	glm::mat4 mModelMatrix = glm::translate(glm::mat4(1.0f), cCamera.vEye);
 	
-	spPointLights.setUniform("matrices.modelMatrix", &mModelMatrix);
-	spPointLights.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mView*mModelMatrix)));
+	spMain.setUniform("matrices.modelMatrix", &mModelMatrix);
+	spMain.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mView*mModelMatrix)));
+
+	CDirectionalLight dlSun2 = dlSun;
+
+	// We set full ambient for skybox, so that its color isn't affected by directional light
+
+	dlSun2.fAmbient = 1.0f;
+	dlSun2.setUniformData(&spMain, "sunLight");
+
 	sbMainSkybox.renderSkybox();
 
 	glBindVertexArray(uiVAOs[0]);
-	spPointLights.setUniform("sunLight.fAmbientIntensity", 0.05f);
-	spPointLights.setUniform("sunLight.fStrength", 0.2f);
 
-	spPointLights.setUniform("ptLight.vColor", glm::vec3(0.0f, 0.0f, 1.0f));
-	spPointLights.setUniform("ptLight.vPosition", vLightPos);
-	spPointLights.setUniform("ptLight.fAmbient", 0.15f);
-	static GLfloat fConst = 0.3f, fLineaer = 0.007f, fExp = 0.00008f;
-	if(Keys::key('P'))fConst += appMain.sof(0.2f);
-	if(Keys::key('O'))fConst -= appMain.sof(0.2f);
-	if(Keys::key('L'))fLineaer += appMain.sof(0.01f);
-	if(Keys::key('K'))fLineaer -= appMain.sof(0.01f);
-	if(Keys::key('M'))fExp += appMain.sof(0.0001f);
-	if(Keys::key('N'))fExp -= appMain.sof(0.0001f);
-
-	if(Keys::key(VK_LEFT))vLightPos.x -= appMain.sof(30.0f);
-	if(Keys::key(VK_RIGHT))vLightPos.x += appMain.sof(30.0f);
-	if(Keys::key(VK_NEXT))vLightPos.y -= appMain.sof(30.0f);
-	if(Keys::key(VK_PRIOR))vLightPos.y += appMain.sof(30.0f);
-	if(Keys::key(VK_UP))vLightPos.z -= appMain.sof(30.0f);
-	if(Keys::key(VK_DOWN))vLightPos.z += appMain.sof(30.0f);
-
-	spPointLights.setUniform("ptLight.fConstantAtt", fConst);
-	spPointLights.setUniform("ptLight.fLinearAtt", fLineaer);
-	spPointLights.setUniform("ptLight.fExpAtt", fExp);
+	dlSun.setUniformData(&spMain, "sunLight");
 	
 	// Render ground
 
-	spPointLights.setUniform("vColor", glm::vec4(1.0f, 1.0f, 1.0f, 1.0f));
-	spPointLights.setUniform("matrices.modelMatrix", glm::mat4(1.0f));
-	spPointLights.setUniform("matrices.normalMatrix", glm::mat4(1.0f));
+	if(bWireFrame)glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+	else glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+
+	spMain.setUniform("vColor", glm::vec4(1.0f, 1.0f, 1.0f, 1.0f));
+	spMain.setUniform("matrices.modelMatrix", glm::mat4(1.0f));
+	spMain.setUniform("matrices.normalMatrix", glm::mat4(1.0f));
 	tTextures[0].bindTexture();
 	glDrawArrays(GL_TRIANGLES, 36, 6);
 
@@ -289,8 +253,8 @@ GLvoid RenderScene(GLvoid* lpParam)
 			mModelMatrix = glm::translate(glm::mat4(1.0), vPos);
 			mModelMatrix = glm::scale(mModelMatrix, glm::vec3(8.0f, 8.0f, 8.0f));
 			// We need to transform normals properly, it's done by transpose of inverse matrix of rotations and scales
-			spPointLights.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
-			spPointLights.setUniform("matrices.modelMatrix", mModelMatrix);
+			spMain.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
+			spMain.setUniform("matrices.modelMatrix", mModelMatrix);
 			glDrawArrays(GL_TRIANGLES, 0, 36);
 		}
 	}
@@ -303,52 +267,47 @@ GLvoid RenderScene(GLvoid* lpParam)
 	glm::vec3 vPos = glm::vec3(0.0f, 50.0, 0.0f);
 	mModelMatrix = glm::translate(glm::mat4(1.0), vPos);
 	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
-	spPointLights.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
-	spPointLights.setUniform("matrices.modelMatrix", &mModelMatrix);
+	spMain.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
+	spMain.setUniform("matrices.modelMatrix", &mModelMatrix);
 	glDrawArrays(GL_TRIANGLES, 66, iTorusFaces*3);
 
 	mModelMatrix = glm::translate(glm::mat4(1.0), vPos);
 	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
 	mModelMatrix = glm::rotate(mModelMatrix, 90.0f, glm::vec3(1.0f, 0.0f, 0.0f));
-	spPointLights.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
-	spPointLights.setUniform("matrices.modelMatrix", &mModelMatrix);
+	spMain.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
+	spMain.setUniform("matrices.modelMatrix", &mModelMatrix);
 	glDrawArrays(GL_TRIANGLES, 66, iTorusFaces*3);
 
 	mModelMatrix = glm::translate(glm::mat4(1.0), vPos);
 	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle+90.0f, glm::vec3(0.0f, 1.0f, 0.0f));
-	spPointLights.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
-	spPointLights.setUniform("matrices.modelMatrix", &mModelMatrix);
+	spMain.setUniform("matrices.normalMatrix", glm::transpose(glm::inverse(mModelMatrix)));
+	spMain.setUniform("matrices.modelMatrix", &mModelMatrix);
 	glDrawArrays(GL_TRIANGLES, 66, iTorusFaces*3);
 
-
-	spColor.UseProgram();
-	spColor.setUniform("matrices.projectionMatrix", oglControl->getProjectionMatrix());
-	spColor.setUniform("matrices.viewMatrix", mView);
-
-	mModelMatrix = glm::translate(glm::mat4(1.0), vLightPos);
-	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle, glm::vec3(1.0f, 0.0f, 0.0f));
-	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
-	mModelMatrix = glm::rotate(mModelMatrix, fGlobalAngle, glm::vec3(0.0f, 0.0f, 1.0f));
-	mModelMatrix = glm::scale(mModelMatrix, glm::vec3(3.0f, 3.0f, 3.0f));
-
-	spColor.setUniform("matrices.modelMatrix", mModelMatrix);
-	renderColoredCube();
-
 	fGlobalAngle += appMain.sof(100.0f);
 	cCamera.update();
 
 	// PrGLint something over scene
-
+	
+	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
+	
 	spFont2D.UseProgram();
 	glDisable(GL_DEPTH_TEST);
-	spFont2D.setUniform("matrices.projectionMatrix", oglControl->getOrthoMatrix());
+	spFont2D.setUniform("matrices.projMatrix", oglControl->getOrthoMatrix());
 
 	GLint w = oglControl->getViewportWidth(), h = oglControl->getViewportHeight();
 	
 	spFont2D.setUniform("vColor", glm::vec4(1.0f, 1.0f, 1.0f, 1.0f));
 	ftFont.print("www.mbsoftworks.sk", 20, 20, 24);
 
-	ftFont.printFormatted(20, h-30, 20, "ATTENUATIONS:\nConst: %.4f\nLinear: %.4f\nExp: %.6f", fConst, fLineaer, fExp);
+	ftFont.printFormatted(20, h-30, 20, "Bender Value: %.3f  (Hold Z and X to change)", fBender);
+	ftFont.printFormatted(20, h-55, 20, "Polygon Mode: %s (Press Q to toggle)", bWireFrame ? "Wireframe" : "Normal");
+
+	if(Keys::onekey('Q'))
+	{
+		bWireFrame = !bWireFrame;
+
+	}
 
 	glEnable(GL_DEPTH_TEST);
 	if(Keys::onekey(VK_ESCAPE))PostQuitMessage(0);
@@ -371,7 +330,7 @@ GLvoid releaseScene(GLvoid* lpParam)
 	FOR(i, NUMTEXTURES)tTextures[i].releaseTexture();
 	sbMainSkybox.releaseSkybox();
 
-	spPointLights.DeleteProgram();
+	spMain.DeleteProgram();
 	spOrtho2D.DeleteProgram();
 	spFont2D.DeleteProgram();
 	FOR(i, NUMSHADERS)shShaders[i].DeleteShader();
diff -up 13_PointLights/shaders.cpp 14_GeometryShaders/shaders.cpp
--- 13_PointLights/shaders.cpp	2015-12-14 14:20:08.024309790 +0200
+++ 14_GeometryShaders/shaders.cpp	2015-12-14 14:20:08.028309790 +0200
@@ -39,7 +39,16 @@ GLboolean CShader::LoadShader(string sFi
 	GLint iCompilationStatus;
 	glGetShaderiv(uiShader, GL_COMPILE_STATUS, &iCompilationStatus);
 
-	if(iCompilationStatus == GL_FALSE)return false;
+	if(iCompilationStatus == GL_FALSE)
+	{
+		GLchar sInfoLog[1024];
+		GLchar sFinalMessage[1536];
+		GLint iLogLength;
+		glGetShaderInfoLog(uiShader, 1024, &iLogLength, sInfoLog);
+		sprintf(sFinalMessage, "Error! Shader file %s wasn't compiled! The compiler returned:\n\n%s", sFile.c_str(), sInfoLog);
+		MessageBox(NULL, sFinalMessage, "Error", MB_ICONERROR);
+		return false;
+	}
 	iType = a_iType;
 	bLoaded = true;
 
diff -up 13_PointLights/shaders.h 14_GeometryShaders/shaders.h
--- 13_PointLights/shaders.h	2015-12-14 14:20:08.024309790 +0200
+++ 14_GeometryShaders/shaders.h	2015-12-14 14:20:08.028309790 +0200
@@ -50,7 +50,6 @@ public:
 
 	GLuint GetProgramID();
 
-
 	// Setting vectors
 	GLvoid setUniform(string sName, glm::vec2* vVectors, GLint iCount = 1);
 	GLvoid setUniform(string sName, const glm::vec2 vVector);
