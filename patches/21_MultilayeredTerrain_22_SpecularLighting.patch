diff -up 21_MultilayeredTerrain/assimp_model.cpp 22_SpecularLighting/assimp_model.cpp
--- 21_MultilayeredTerrain/assimp_model.cpp	2015-12-14 14:20:08.048309790 +0200
+++ 22_SpecularLighting/assimp_model.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -109,8 +109,11 @@ GLboolean CAssimpModel::LoadModelFromFil
 		GLint a = 5;
 		GLint texIndex = 0;
 		aiString path;  // filename
-
-		if(material->GetTexture(aiTextureType_DIFFUSE, texIndex, &path) == AI_SUCCESS)
+		GLboolean ok = material->GetTexture(aiTextureType_DIFFUSE, texIndex, &path) == AI_SUCCESS;
+		if(!ok)ok = material->GetTexture(aiTextureType_AMBIENT, texIndex, &path) == AI_SUCCESS;
+		if(!ok)ok = material->GetTexture(aiTextureType_UNKNOWN, texIndex, &path) == AI_SUCCESS;
+		if(!ok)ok = material->GetTexture(aiTextureType_AMBIENT, texIndex, &path) == AI_SUCCESS;
+		if(ok)
 		{
 			string sDir = GetDirectoryPath(sFilePath);
 			string sTextureName = path.data;
@@ -194,7 +197,7 @@ Result: Guess what it does ^^.
 
 /*---------------------------------------------*/
 
-GLvoid CAssimpModel::RenderModel()
+GLvoid CAssimpModel::RenderModel(GLenum RenderMode)
 {
 	if(!bLoaded)return;
 	GLint iNumMeshes = ESZ(iMeshSizes);
@@ -202,6 +205,6 @@ GLvoid CAssimpModel::RenderModel()
 	{
 		GLint iMatIndex = iMaterialIndices[i];
 		tTextures[iMatIndex].BindTexture();
-		glDrawArrays(GL_TRIANGLES, iMeshStartIndices[i], iMeshSizes[i]);
+		glDrawArrays(RenderMode, iMeshStartIndices[i], iMeshSizes[i]);
 	}
 }
\ No newline at end of file
diff -up 21_MultilayeredTerrain/assimp_model.h 22_SpecularLighting/assimp_model.h
--- 21_MultilayeredTerrain/assimp_model.h	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/assimp_model.h	2015-12-14 14:20:08.052309790 +0200
@@ -4,12 +4,6 @@
 #include "vertexBufferObject.h"
 #include "texture.h"
 
-class CMaterial
-{
-public:
-	GLint iTexture;
-};
-
 class CAssimpModel
 {
 public:
@@ -18,7 +12,7 @@ public:
 	static GLvoid FinalizeVBO();
 	static GLvoid BindModelsVAO();
 
-	GLvoid RenderModel();
+	GLvoid RenderModel(GLenum   = GL_TRIANGLES);
 	CAssimpModel();
 private:
 	GLboolean bLoaded;
diff -up 21_MultilayeredTerrain/dirLight.cpp 22_SpecularLighting/dirLight.cpp
--- 21_MultilayeredTerrain/dirLight.cpp	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/dirLight.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -8,14 +8,16 @@ CDirectionalLight::CDirectionalLight()
 	vDirection = glm::vec3(0.0f, -1.0f, 0.0f);
 
 	fAmbient = 0.25f;
+	iSkybox = 0;
 }
 
-CDirectionalLight::CDirectionalLight(glm::vec3 a_vColor, glm::vec3 a_vDirection, GLfloat a_fAmbient)
+CDirectionalLight::CDirectionalLight(glm::vec3 a_vColor, glm::vec3 a_vDirection, GLfloat a_fAmbient, GLint a_iSkybox)
 {
 	vColor = a_vColor;
 	vDirection = a_vDirection;
 
 	fAmbient = a_fAmbient;
+	iSkybox = a_iSkybox;
 }
 
 /*-----------------------------------------------
@@ -35,4 +37,5 @@ GLvoid CDirectionalLight::SetUniformData
 	spProgram->SetUniform(sLightVarName+".vDirection", vDirection);
 
 	spProgram->SetUniform(sLightVarName+".fAmbient", fAmbient);
+	spProgram->SetUniform(sLightVarName+".iSkybox", iSkybox);
 }
\ No newline at end of file
diff -up 21_MultilayeredTerrain/dirLight.h 22_SpecularLighting/dirLight.h
--- 21_MultilayeredTerrain/dirLight.h	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/dirLight.h	2015-12-14 14:20:08.052309790 +0200
@@ -4,7 +4,7 @@
 
 /********************************
 
-Class:		CPointLight
+Class:		CDirectionalLight
 
 Purpose:	Support class for adding
 			directional lights to scene.
@@ -18,9 +18,10 @@ public:
 	glm::vec3 vDirection; // and its direction
 
 	GLfloat fAmbient;
+	GLint iSkybox;
 
 	GLvoid SetUniformData(CShaderProgram* spProgram, string sLightVarName);
 
 	CDirectionalLight();
-	CDirectionalLight(glm::vec3 a_vColor, glm::vec3 a_vDirection, GLfloat a_fAmbient);
+	CDirectionalLight(glm::vec3 a_vColor, glm::vec3 a_vDirection, GLfloat a_fAmbient, GLint a_iSkybox);
 };
\ No newline at end of file
diff -up 21_MultilayeredTerrain/heightmap.cpp 22_SpecularLighting/heightmap.cpp
--- 21_MultilayeredTerrain/heightmap.cpp	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/heightmap.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -254,9 +254,9 @@ GLvoid CMultiLayeredHeightmap::RenderHei
 	spTerrain.SetUniform("fRenderHeight", vRenderScale.y);
 	spTerrain.SetUniform("fMaxTextureU", float(iCols)*0.1f);
 	spTerrain.SetUniform("fMaxTextureV", float(iRows)*0.1f);
-	
-	spTerrain.SetUniform("HeightmapScaleMatrix", glm::scale(glm::mat4(1.0), glm::vec3(vRenderScale)));
-	
+
+	spTerrain.SetUniform("HeightmapScaleMatrix", GetScaleMatrix());
+
 	// Now we're ready to render - we are drawing set of triangle strips using one call, but we g otta enable primitive restart
 	glBindVertexArray(uiVAO);
 	glEnable(GL_PRIMITIVE_RESTART);
@@ -266,6 +266,18 @@ GLvoid CMultiLayeredHeightmap::RenderHei
 	glDrawElements(GL_TRIANGLE_STRIP, iNumIndices, GL_UNSIGNED_INT, 0);
 }
 
+GLvoid CMultiLayeredHeightmap::RenderHeightmapForNormals()
+{
+	// Now we're ready to render - we are drawing set of triangle strips using one call, but we g otta enable primitive restart
+	glBindVertexArray(uiVAO);
+	glEnable(GL_PRIMITIVE_RESTART);
+	glPrimitiveRestartIndex(iRows*iCols);
+
+	GLint iNumIndices = (iRows-1)*iCols*2 + iRows-1;
+	glDrawElements(GL_POINTS, iNumIndices, GL_UNSIGNED_INT, 0);
+}
+
+
 /*-----------------------------------------------
 
 Name:	ReleaseHeightmap
@@ -337,4 +349,9 @@ GLint CMultiLayeredHeightmap::GetNumHeig
 GLint CMultiLayeredHeightmap::GetNumHeightmapCols()
 {
 	return iCols;
+}
+
+glm::mat4 CMultiLayeredHeightmap::GetScaleMatrix()
+{
+	return glm::scale(glm::mat4(1.0), glm::vec3(vRenderScale));
 }
\ No newline at end of file
diff -up 21_MultilayeredTerrain/heightmap.h 22_SpecularLighting/heightmap.h
--- 21_MultilayeredTerrain/heightmap.h	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/heightmap.h	2015-12-14 14:20:08.052309790 +0200
@@ -24,6 +24,7 @@ public:
 	GLvoid ReleaseHeightmap();
 
 	GLvoid RenderHeightmap();
+	GLvoid RenderHeightmapForNormals();
 
 	GLvoid SetRenderSize(GLfloat fQuadSize, GLfloat fHeight);
 	GLvoid SetRenderSize(GLfloat fRenderX, GLfloat fHeight, GLfloat fRenderZ);
@@ -31,6 +32,8 @@ public:
 	GLint GetNumHeightmapRows();
 	GLint GetNumHeightmapCols();
 
+	glm::mat4 GetScaleMatrix();
+
 	static CShaderProgram* GetShaderProgram();
 
 	CMultiLayeredHeightmap();
diff -up 21_MultilayeredTerrain/Lin_OpenGLApp.cpp 22_SpecularLighting/Lin_OpenGLApp.cpp
--- 21_MultilayeredTerrain/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.048309790 +0200
+++ 22_SpecularLighting/Lin_OpenGLApp.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -319,11 +319,11 @@ Result:	Application entry point.
 
 GLint WINAPI WinMain(GLvoid* hInstance, GLvoid* hPrevInstance, LPSTR sCmdLine, GLint iShow)
 {
-	if(!appMain.InitializeApp("21_opengl_3_3"))
+	if(!appMain.InitializeApp("22_opengl_3_3"))
 		return 0;
 	appMain.RegisterAppClass(hInstance);
 
-	if(!appMain.CreateAppWindow("21.) Multilayered Terrain - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
+	if(!appMain.CreateAppWindow("22.) Specular Lighting - Tutorial by Michal Bubnar (www.mbsoftworks.sk)"))
 		return 0;
 	appMain.ResetTimer();
 
Only in 22_SpecularLighting/: material.cpp
Only in 22_SpecularLighting/: material.h
diff -up 21_MultilayeredTerrain/RenderScene.cpp 22_SpecularLighting/RenderScene.cpp
--- 21_MultilayeredTerrain/RenderScene.cpp	2015-12-14 14:20:08.048309790 +0200
+++ 22_SpecularLighting/RenderScene.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -12,11 +12,14 @@
 
 #include "skybox.h"
 #include "dirLight.h"
+#include "material.h"
 
 #include "assimp_model.h"
 
 #include "heightmap.h"
 
+#include "static_geometry.h"
+
 
 CVertexBufferObject vboSceneObjects;
 GLuint uiVAOSceneObjects;
@@ -28,10 +31,15 @@ CFlyingCamera cCamera;
 
 CDirectionalLight dlSun;
 
+CMaterial matShiny;
 CAssimpModel amModels[3];
 
 CMultiLayeredHeightmap hmWorld;
 
+GLint iTorusFaces;
+
+GLboolean bDisplayNormals = true; // Do not display normals by default
+
 /*-----------------------------------------------
 
 Name:    InitScene
@@ -55,6 +63,26 @@ GLvoid InitScene(GLvoid* lpParam)
 	
 	LoadAllTextures();
 
+	vboSceneObjects.CreateVBO();
+	glGenVertexArrays(1, &uiVAOSceneObjects); // Create one VAO
+	glBindVertexArray(uiVAOSceneObjects);
+
+	vboSceneObjects.BindVBO();
+
+	iTorusFaces = GenerateTorus(vboSceneObjects, 7.0f, 2.0f, 20, 20);
+	vboSceneObjects.UploadDataToGPU(GL_STATIC_DRAW);
+
+	// Vertex positions
+	glEnableVertexAttribArray(0);
+	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 2*sizeof(glm::vec3)+sizeof(glm::vec2), 0);
+	// Texture coordinates
+	glEnableVertexAttribArray(1);
+	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 2*sizeof(glm::vec3)+sizeof(glm::vec2), (void*)sizeof(glm::vec3));
+	// Normal vectors
+	glEnableVertexAttribArray(2);
+	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 2*sizeof(glm::vec3)+sizeof(glm::vec2), (void*)(sizeof(glm::vec3)+sizeof(glm::vec2)));
+
+
 	glEnable(GL_DEPTH_TEST);
 	glClearDepth(1.0);
 
@@ -65,16 +93,20 @@ GLvoid InitScene(GLvoid* lpParam)
 	cCamera = CFlyingCamera(glm::vec3(0.0f, 30.0f, 100.0f), glm::vec3(0.0f, 30.0f, 99.0f), glm::vec3(0.0f, 1.0f, 0.0f), 25.0f, 0.1f);
 	cCamera.SetMovingKeys('W', 'S', 'A', 'D');
 
-	sbMainSkybox.LoadSkybox("data/skyboxes/elbrus/", "elbrus_front.jpg", "elbrus_back.jpg", "elbrus_right.jpg", "elbrus_left.jpg", "elbrus_top.jpg", "elbrus_top.jpg");
+	sbMainSkybox.LoadSkybox("data/skyboxes/nuke/", "nuke_front.jpg", "nuke_back.jpg", "nuke_right.jpg", "nuke_left.jpg", "nuke_top.jpg", "nuke_top.jpg");
 
-	dlSun = CDirectionalLight(glm::vec3(1.0f, 1.0f, 1.0f), glm::vec3(sqrt(2.0f)/2, -sqrt(2.0f)/2, 0), 0.5f);
+	dlSun = CDirectionalLight(glm::vec3(1.0f, 1.0f, 1.0f), glm::vec3(sqrt(2.0f)/2, -sqrt(2.0f)/2, 0), 0.5f, 0);
 
-	amModels[0].LoadModelFromFile("data/models/Wolf/Wolf.obj");
-	amModels[1].LoadModelFromFile("data/models/house/house.3ds");
+	amModels[0].LoadModelFromFile("data/models/house/house.3ds");
+	amModels[1].LoadModelFromFile("data/models/small_fighter_1/small_fighter_1.3DS");
+	
 	CAssimpModel::FinalizeVBO();
 
+
 	CMultiLayeredHeightmap::LoadTerrainShaderProgram();
-	hmWorld.LoadHeightMapFromImage("data/worlds/consider_this_question.bmp");
+	hmWorld.LoadHeightMapFromImage("data/worlds/world_like_in_21th_tutorial.bmp");
+
+	matShiny = CMaterial(1.0f, 32.0f);
 }
 
 /*-----------------------------------------------
@@ -113,30 +145,69 @@ GLvoid RenderScene(GLvoid* lpParam)
 	if(Keys::Key(VK_SUBTRACT))fAngleOfDarkness -= appMain.sof(90);
 	// Set the directional vector of light
 	dlSun.vDirection = glm::vec3(-sin(fAngleOfDarkness*3.1415f/180.0f), -cos(fAngleOfDarkness*3.1415f/180.0f), 0.0f);
+	
+	dlSun.iSkybox = 1;
 	dlSun.SetUniformData(&spMain, "sunLight");
 
 	spMain.SetUniform("matrices.modelMatrix", glm::translate(glm::mat4(1.0), cCamera.vEye));
 	sbMainSkybox.RenderSkybox();
 
+	dlSun.iSkybox = 0;
+	dlSun.SetUniformData(&spMain, "sunLight");
+
 	spMain.SetUniform("matrices.modelMatrix", glm::mat4(1.0));
+
+	spMain.SetUniform("vEyePosition", cCamera.vEye);
+	matShiny.SetUniformData(&spMain, "matActive");
 	
 	// Render a house
 
 	CAssimpModel::BindModelsVAO();
 
 	glm::mat4 mModel = glm::translate(glm::mat4(1.0), glm::vec3(40.0f, 17.0f, 0));
-	mModel = glm::scale(mModel, glm::vec3(8, 8, 8)); // Casino :D
+	mModel = glm::scale(mModel, glm::vec3(8, 8, 8));
+
+	spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+	amModels[0].RenderModel();
+	
+	// ... and a jet fighter
+
+	mModel = glm::translate(glm::mat4(1.0), glm::vec3(-20.0f, 72.0f, 50));
+	mModel = glm::rotate(mModel, -90.0f, glm::vec3(1.0f, 0.0f, 0.0f));
+	mModel = glm::scale(mModel, glm::vec3(1, 1, 1));
 
 	spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
 	amModels[1].RenderModel();
 
-	// ... and also ONE wolf now only :P
+	// Render 3 rotated tori to create interesting object
 
-	mModel = glm::translate(glm::mat4(1.0), glm::vec3(-20.0f, 22.0f, 50));
-	mModel = glm::scale(mModel, glm::vec3(2.8f, 2.8f, 2.8f));
+	tTextures[5].BindTexture();
+	glBindVertexArray(uiVAOSceneObjects);
+	static GLfloat fGlobalAngle = 0.0f;
 
-	spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
-	amModels[0].RenderModel();
+	FOR(i, 2)
+	{
+		glm::vec3 vCenter = glm::vec3(-40+i*40, 30, -20);
+		mModel = glm::translate(glm::mat4(1.0), vCenter);
+		if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+		spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+		glDrawArrays(GL_TRIANGLES, 0, iTorusFaces*3);
+
+		mModel = glm::translate(glm::mat4(1.0), vCenter+glm::vec3(0.01f, 0.0f, 0.0f));
+		if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+		mModel = glm::rotate(mModel, 90.0f, glm::vec3(1.0f, 0.0f, 0.0f));
+		spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+		glDrawArrays(GL_TRIANGLES, 0, iTorusFaces*3);
+
+		mModel = glm::translate(glm::mat4(1.0), vCenter+glm::vec3(0.00f, 0.01f, 0.0f));
+
+		if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+		mModel = glm::rotate(mModel, 90.0f, glm::vec3(0.0f, 1.0f, 0.0f));
+		spMain.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+		glDrawArrays(GL_TRIANGLES, 0, iTorusFaces*3);
+	}
+
+	fGlobalAngle += appMain.sof(50.0f);
 
 
 	// Now we're going to render terrain
@@ -149,6 +220,9 @@ GLvoid RenderScene(GLvoid* lpParam)
 	spTerrain->SetUniform("matrices.projMatrix", oglControl->GetProjectionMatrix());
 	spTerrain->SetUniform("matrices.viewMatrix", cCamera.Look());
 
+	spTerrain->SetUniform("vEyePosition", cCamera.vEye);
+	matShiny.SetUniformData(spTerrain, "matActive");
+
 	// We bind all 5 textures - 3 of them are textures for layers, 1 texture is a "path" texture, and last one is
 	// the places in heightmap where path should be and how intense should it be
 	FOR(i, 5)
@@ -168,6 +242,59 @@ GLvoid RenderScene(GLvoid* lpParam)
 	// ... and finally render heightmap
 	hmWorld.RenderHeightmap();
 
+	if(bDisplayNormals)
+	{
+		spNormalDisplayer.UseProgram();
+		spNormalDisplayer.SetUniform("fNormalLength", 1.0f);
+		spNormalDisplayer.SetUniform("matrices.projMatrix", oglControl->GetProjectionMatrix());
+		spNormalDisplayer.SetUniform("matrices.viewMatrix", cCamera.Look());
+
+		CAssimpModel::BindModelsVAO();
+
+		// ... Render the house again
+
+		glm::mat4 mModel = glm::translate(glm::mat4(1.0), glm::vec3(40.0f, 17.0f, 0));
+		mModel = glm::scale(mModel, glm::vec3(8, 8, 8));
+
+		spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+		amModels[0].RenderModel(GL_POINTS);
+
+		// ... and the jet fighter again
+
+		mModel = glm::translate(glm::mat4(1.0), glm::vec3(-20.0f, 72.0f, 50));
+		mModel = glm::rotate(mModel, -90.0f, glm::vec3(1.0f, 0.0f, 0.0f));
+
+		spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+		amModels[1].RenderModel(GL_POINTS);
+
+		glBindVertexArray(uiVAOSceneObjects);
+
+		FOR(i, 2)
+		{
+			glm::vec3 vCenter = glm::vec3(-40+i*40, 30, -20);
+			mModel = glm::translate(glm::mat4(1.0), vCenter);
+			if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+			spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+			glDrawArrays(GL_POINTS, 0, iTorusFaces*3);
+
+			mModel = glm::translate(glm::mat4(1.0), vCenter+glm::vec3(0.01f, 0.0f, 0.0f));
+			if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+			mModel = glm::rotate(mModel, 90.0f, glm::vec3(1.0f, 0.0f, 0.0f));
+			spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+			glDrawArrays(GL_POINTS, 0, iTorusFaces*3);
+
+			mModel = glm::translate(glm::mat4(1.0), vCenter+glm::vec3(0.00f, 0.01f, 0.0f));
+
+			if(i == 0)mModel = glm::rotate(mModel, fGlobalAngle, glm::vec3(0.0f, 1.0f, 0.0f));
+			mModel = glm::rotate(mModel, 90.0f, glm::vec3(0.0f, 1.0f, 0.0f));
+			spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", mModel);
+			glDrawArrays(GL_POINTS, 0, iTorusFaces*3);
+		}
+
+		spNormalDisplayer.SetModelAndNormalMatrix("matrices.modelMatrix", "matrices.normalMatrix", hmWorld.GetScaleMatrix());
+		hmWorld.RenderHeightmapForNormals();
+	}
+
 	cCamera.Update();
 
 	// PrGLint something over scene
@@ -184,7 +311,18 @@ GLvoid RenderScene(GLvoid* lpParam)
 	ftFont.PrintFormatted(20, h-30, 20, "FPS: %d", oglControl->GetFPS());
 	ftFont.PrintFormatted(20, h-80, 20, "Heightmap size: %dx%d", hmWorld.GetNumHeightmapRows(), hmWorld.GetNumHeightmapCols());
 
-	glEnable(GL_DEPTH_TEST);
+	ftFont.PrintFormatted(20, h-110, 20, "Specular Intensity: %.2f (Press 'Q' and 'E' to change)", matShiny.fSpecularIntensity);
+	if(Keys::Key('Q'))matShiny.fSpecularIntensity -= appMain.sof(0.2f);
+	if(Keys::Key('E'))matShiny.fSpecularIntensity += appMain.sof(0.2f);
+
+	ftFont.PrintFormatted(20, h-140, 20, "Specular Power: %.2f (Press 'Z' and 'C' to change)", matShiny.fSpecularPower);
+	if(Keys::Key('Z'))matShiny.fSpecularPower -= appMain.sof(8.0f);
+	if(Keys::Key('C'))matShiny.fSpecularPower += appMain.sof(8.0f);
+
+	ftFont.PrintFormatted(20, h-200, 20, "Displaying Normals: %s (Press 'N' to toggle)", bDisplayNormals ? "Yes" : "Nah");
+	if(Keys::Onekey('N'))bDisplayNormals = !bDisplayNormals;
+
+	glEnable(GL_DEPTH_TEST);	
 	if(Keys::Onekey(VK_ESCAPE))PostQuitMessage(0);
 
 	oglControl->SwapBuffers();
diff -up 21_MultilayeredTerrain/shaders.cpp 22_SpecularLighting/shaders.cpp
--- 21_MultilayeredTerrain/shaders.cpp	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/shaders.cpp	2015-12-14 14:20:08.052309790 +0200
@@ -10,7 +10,7 @@ CShader::CShader()
 }
 
 CShader shShaders[NUMSHADERS];
-CShaderProgram spMain, spOrtho2D, spFont2D;
+CShaderProgram spMain, spOrtho2D, spFont2D, spNormalDisplayer;
 
 /*-----------------------------------------------
 
@@ -26,8 +26,8 @@ GLboolean PrepareShaderPrograms()
 {
 	// Load shaders and create shader program
 
-	string sShaderFileNames[] = {"main_shader.vert", "main_shader.frag", "ortho2D.vert",
-		"ortho2D.frag", "font2D.frag", "dirLight.frag"
+	string sShaderFileNames[] = {"main_shader.vert", "main_shader.frag", "ortho2D.vert", "ortho2D.frag", "font2D.frag", "dirLight.frag",
+		"normal_displayer.vert", "normal_displayer.geom", "normal_displayer.frag"
 	};
 
 	FOR(i, NUMSHADERS)
@@ -40,25 +40,30 @@ GLboolean PrepareShaderPrograms()
 	// Create shader programs
 
 	spMain.CreateProgram();
-	spMain.AddShaderToProgram(&shShaders[0]);
-	spMain.AddShaderToProgram(&shShaders[1]);
-	spMain.AddShaderToProgram(&shShaders[5]);
-
+		spMain.AddShaderToProgram(&shShaders[0]);
+		spMain.AddShaderToProgram(&shShaders[1]);
+		spMain.AddShaderToProgram(&shShaders[5]);
 	if(!spMain.LinkProgram())return false;
 
 	spOrtho2D.CreateProgram();
-	spOrtho2D.AddShaderToProgram(&shShaders[3]);
-	spOrtho2D.AddShaderToProgram(&shShaders[4]);
-	spOrtho2D.LinkProgram();
+		spOrtho2D.AddShaderToProgram(&shShaders[2]);
+		spOrtho2D.AddShaderToProgram(&shShaders[3]);
+	if(!spOrtho2D.LinkProgram())return false;
 
 	spFont2D.CreateProgram();
-	spFont2D.AddShaderToProgram(&shShaders[2]);
-	spFont2D.AddShaderToProgram(&shShaders[4]);
-	spFont2D.LinkProgram();
+		spFont2D.AddShaderToProgram(&shShaders[2]);
+		spFont2D.AddShaderToProgram(&shShaders[4]);
+	if(!spFont2D.LinkProgram())return false;
+
+	spNormalDisplayer.CreateProgram();
+		spNormalDisplayer.AddShaderToProgram(&shShaders[6]);
+		spNormalDisplayer.AddShaderToProgram(&shShaders[7]);
+		spNormalDisplayer.AddShaderToProgram(&shShaders[8]);
+	if(!spNormalDisplayer.LinkProgram())return false;
 
 	return true;
 }
-
+ 
 /*-----------------------------------------------
 
 Name:    LoadShader
diff -up 21_MultilayeredTerrain/shaders.h 22_SpecularLighting/shaders.h
--- 21_MultilayeredTerrain/shaders.h	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/shaders.h	2015-12-14 14:20:08.056309790 +0200
@@ -87,7 +87,7 @@ private:
 
 GLboolean PrepareShaderPrograms();
 
-#define NUMSHADERS 6
+#define NUMSHADERS 9
 
 extern CShader shShaders[NUMSHADERS];
-extern CShaderProgram spMain, spOrtho2D, spFont2D, spColor;
\ No newline at end of file
+extern CShaderProgram spMain, spOrtho2D, spFont2D, spNormalDisplayer;
\ No newline at end of file
Only in 22_SpecularLighting/: static_geometry.cpp
Only in 22_SpecularLighting/: static_geometry.h
diff -up 21_MultilayeredTerrain/texture.cpp 22_SpecularLighting/texture.cpp
--- 21_MultilayeredTerrain/texture.cpp	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/texture.cpp	2015-12-14 14:20:08.056309790 +0200
@@ -289,7 +289,7 @@ GLvoid LoadAllTextures()
 {
 	// Load textures
 
-	string sTextureNames[] = {"fungus.dds", "sand_grass_02.jpg", "rock_2_4w.jpg", "sand.jpg", "path.png"};
+	string sTextureNames[] = {"metalplate.jpg", "scifi_metal.jpg", "scifi_ceiling.jpg", "circuits.jpg", "path.png", "sand.jpg"};
 
 	FOR(i, NUMTEXTURES)
 	{
diff -up 21_MultilayeredTerrain/texture.h 22_SpecularLighting/texture.h
--- 21_MultilayeredTerrain/texture.h	2015-12-14 14:20:08.052309790 +0200
+++ 22_SpecularLighting/texture.h	2015-12-14 14:20:08.056309790 +0200
@@ -62,6 +62,6 @@ private:
 	string sPath;
 };
 
-#define NUMTEXTURES 5
+#define NUMTEXTURES 6
 extern CTexture tTextures[NUMTEXTURES];
 GLvoid LoadAllTextures();
\ No newline at end of file
